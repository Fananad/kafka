from fastapi import FastAPI, Request, HTTPException
import httpx
import os
import logging

app = FastAPI()
logging.basicConfig(level=logging.INFO)

# URL —Å–µ—Ä–≤–∏—Å–∞ telegram-consumer, –∫—É–¥–∞ –±—É–¥–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
TELEGRAM_CONSUMER_URL = os.getenv("TELEGRAM_CONSUMER_URL", "http://localhost:9000/send")


@app.post("/send")
async def send_message(request: Request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π POST-–∑–∞–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ telegram-consumer
    """
    try:
        data = await request.json()
        message = data.get("message")

        if not message:
            raise HTTPException(status_code=400, detail="Missing 'message' field")

        logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

        async with httpx.AsyncClient() as client:
            response = await client.post(TELEGRAM_CONSUMER_URL, json={"message": message})
            response.raise_for_status()
            telegram_response = response.json()

        logging.info(f"üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ telegram-consumer: {telegram_response}")
        return {
            "status": "forwarded",
            "message": message,
            "response_from_consumer": telegram_response
        }

    except httpx.RequestError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å telegram-consumer: {e}")
        raise HTTPException(status_code=502, detail="Cannot reach telegram-consumer")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")
