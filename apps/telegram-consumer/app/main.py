from fastapi import FastAPI, Request, HTTPException
import httpx
import os
import logging

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
log = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏ chat_id –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

@app.post("/send")
async def send_to_telegram(request: Request):
    data = await request.json()
    log.info(f"üîç –ü–æ–ª—É—á–µ–Ω JSON: {data}")
    message = data.get("message")
    log.info(f"üì® –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ message: {message}")

    payload = {
        "chat_id": CHAT_ID,
        "text": message
    }
    log.info(f"üì§ –ì–æ—Ç–æ–≤–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram: {payload}")
    log.info(f"üì° URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {TELEGRAM_API_URL}")
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(TELEGRAM_API_URL, json=payload)
            log.info(f"üì¨ –û—Ç–≤–µ—Ç Telegram API: {response.status_code} - {response.text}")
            response.raise_for_status()
        log.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message}")
        return {"status": "ok", "telegram_response": response.json()}
    except httpx.HTTPStatusError as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Telegram API: {e.response.status_code} - {e.response.text}")
        raise HTTPException(status_code=502, detail="Telegram API returned error")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal error")
